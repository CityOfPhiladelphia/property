{
  "name": "grunt-processhtml",
  "description": "Process html files at build time to modify them depending on the release environment",
  "version": "0.2.2",
  "homepage": "https://github.com/dciccale/grunt-processhtml",
  "author": {
    "name": "Denis Ciccale",
    "email": "dciccale@gmail.com",
    "url": "http://twitter.com/tdecs"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dciccale/grunt-processhtml.git"
  },
  "bugs": {
    "url": "https://github.com/dciccale/grunt-processhtml/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/dciccale/grunt-processhtml/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "0.6.4",
    "grunt-contrib-nodeunit": "0.2.1",
    "grunt": "0.4.1"
  },
  "peerDependencies": {
    "grunt": "0.4.x"
  },
  "keywords": [
    "process",
    "html",
    "index",
    "build",
    "buildtime",
    "environment",
    "target",
    "optimize",
    "gruntplugin"
  ],
  "readme": "# grunt-processhtml [![Build Status](https://travis-ci.org/dciccale/grunt-processhtml.png?branch=master)](https://travis-ci.org/dciccale/grunt-processhtml) [![NPM version](https://badge.fury.io/js/grunt-processhtml.png)](http://badge.fury.io/js/grunt-processhtml)\n\n> Process html files at build time to modify them depending on the release environment\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-processhtml --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-processhtml');\n```\n\n## The \"processhtml\" task\n\nProcess `html` files with special comments:\n\n```html\n<!-- build:<type>[:target] [value] -->\n...\n<!-- /build -->\n```\n\n##### type\nThis is required.\n\nTypes: `js`, `css`, `remove`, `template` or `include`. or any html attribute if written like this: `[href]`, `[src]`, etc.\n\n##### target\nThis is optional.\n\nIs the target name of your grunt task, for example: `dist`. Is supported for all types, so you can always specify the target if needed.\n\n##### value\nRequired for types: `js`, `css`, `include` and `[attr]`.\n\nOptional for types: `remove`, `template`.\n\nCould be a file name: `script.min.js` or a path if an attribute like `[src]` is specified to keep the original file name intact but replace its path.\n\n### Simple examples\n\n##### `build:js[:target] <value>`\n\nReplace many script tags into one.\n\n`[:target]` Optional build target.\n\n`<value>` Required value: A file path.\n\n```html\n<!-- build:js app.min.js -->\n<script src=\"my/lib/path/lib.js\"></script>\n<script src=\"my/deep/development/path/script.js\"></script>\n<!-- /build -->\n\n<!-- changeg to -->\n<script src=\"app.min.js\"></script>\n```\n\n##### `build:css[:target] <value>`\n\nReplace many stylesheet link tags into one.\n\n`[:target]` Optional build target.\n\n`<value>` Required value: A file path.\n\n```html\n<!-- build:css style.min.css -->\n<link rel=\"stylesheet\" href=\"path/to/normalize.css\">\n<link rel=\"stylesheet\" href=\"path/to/main.css\">\n<!-- /build -->\n\n<!-- changed to -->\n<link rel=\"stylesheet\" href=\"style.min.css\">\n```\n\n##### `build:<[attr]>[:target] <value>`\n\nChange the value of an attribute. In most cases using `[src]` and `[href]` will be enough but it works with any html attribute.\n\n`<[attr]>` Required html attribute, i.e. `[src]`, `[href]`.\n\n`[:target]` Optional build target.\n\n`<value>` Required value: A path or a file path.\n\n```html\n<!-- If only a path is used, the original file name will remain -->\n\n<!-- build:[src] js/ -->\n<script src=\"my/lib/path/lib.js\"></script>\n<script src=\"my/deep/development/path/script.js\"></script>\n<!-- /build -->\n\n<!-- changed the src attribute path -->\n<script src=\"js/lib.js\"></script>\n<script src=\"js/script.js\"></script>\n\n<!-- build:[href] img/ -->\n<link rel=\"apple-touch-icon-precomposed\" href=\"skins/demo/img/icon.png\">\n<link rel=\"apple-touch-icon-precomposed\" href=\"skins/demo/img/icon-72x72.png\" sizes=\"72x72\">\n<!-- /build -->\n\n<!-- changed the href attribute path -->\n<link rel=\"apple-touch-icon-precomposed\" href=\"img/icon.png\">\n<link rel=\"apple-touch-icon-precomposed\" href=\"img/icon-72x72.png\" sizes=\"72x72\">\n\n<!-- build:[class]:dist production -->\n<html class=\"debug_mode\">\n<!-- /build -->\n\n<!-- this will change the class to 'production' only when de 'dist' build is executed -->\n<html class=\"production\">\n\n```\n\n##### `build:include[:target] <value>`\n\nInclude an external file.\n\n`[:target]` Optional build target.\n\n`<value>` Required value: A file path.\n\n```html\n<!-- build:include header.html -->\nThis will be replaced by the content of header.html\n<!-- /build -->\n\n<!-- build:include:dev dev/content.html -->\nThis will be replaced by the content of dev/header.html\n<!-- /build -->\n\n<!-- build:include:dist dist/content.html -->\nThis will be replaced by the content of dist/content.html\n<!-- /build -->\n```\n\n##### `build:template[:target]`\n\nProcess a template block with a data object inside [options.data](#optionsdata).\n\n`[:target]` Optional build target.\n\n\n```html\n<!-- build:template\n<p>Hello, <%= name %></p>\n/build -->\n\n<!--\nnotice that the template block is commented\nto prevent breaking the html file and keeping it functional\n-->\n```\n\n##### `build:remove[:target]`\n\nRemove a block.\n\n`[:target]` Optional build target\n\n```html\n<!-- build:remove -->\n<p>This will be removed when any processhtml target is done</p>\n<!-- /build -->\n\n<!-- build:remove:dist -->\n<p>But this one only when doing processhtml:dist target</p>\n<!-- /build -->\n```\n\n### Overview\nIn your project's Gruntfile, add a section named `processhtml` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  processhtml: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.process\nType: `Boolean`\nDefault value: `false`\n\nProcess the entire `html` file through `grunt.template.process`, a default object with the build target will be passed to the\ntemplate in the form of `{environment: target}` where environment will be the build target of the grunt task.\n\n*Important note: The `process` option is not needed if you don't want to process the entire html file. See the example\nbelow to see that you can have templates blocks to be processed.*\n\nIf you do wan't to process the whole file as a template, it will be compiled after compiling the inside template blocks\nif any.\n\n#### options.data\nType: `Object`\nDefault value: `{environment: target}`\n\nAn object `data` that is passed to the `html` file used to compile all template blocks and the entire file if `process`\nis true.\nIf a custom object is passed as `data`, this will be merged with the default to keep the `environment` key intact.\n\n#### options.templateSettings\nType: `Object`\nDefault value: `null` (Will use default grunt template delimiters `<%` and `%>`)\n\nDefine the `templateSettings` option with a custom `opener` and `closer` delimiters to customize the\ntemplate syntax delimiters.\n\n```javascript\ntemplateSettings: {\n  opener: '{{',\n  closer: '}}'\n}\n```\n\n### Usage Examples\n\n#### Default Options\nSet the task in your grunt file which is going to process the `index.html` file and save the output to\n`dest/index.html`\n\n```js\ngrunt.initConfig({\n  processhtml: {\n    options: {\n      data: {\n        message: 'Hello world!'\n      }\n    },\n    dist: {\n      files: {\n        'dest/index.html': ['index.html']\n      }\n    }\n  }\n});\n```\n\n#### What will be processed?\nFollowing the previous task configuration, the `index.html` could look like this:\n\n```html\n<!doctype html>\n<title>title</title>\n\n<!-- build:[href] img/ -->\n<link rel=\"apple-touch-icon-precomposed\" href=\"my/theme/img/apple-touch-icon-precomposed.png\">\n<link rel=\"apple-touch-icon-precomposed\" href=\"my/theme/img/apple-touch-icon-72x72-precomposed.png\" sizes=\"72x72\">\n<!-- /build -->\n\n<!-- build:css style.min.css -->\n<link rel=\"stylesheet\" href=\"normalize.css\">\n<link rel=\"stylesheet\" href=\"main.css\">\n<!-- /build -->\n\n<!-- build:js app.min.js -->\n<script src=\"js/libs/require.js\" data-main=\"js/config.js\"></script>\n<!-- /build -->\n\n<!-- build:include header.html -->\nThis will be replaced by the content of header.html\n<!-- /build -->\n\n<!-- build:template\n<p><%= message %></p>\n/build -->\n\n<!-- build:remove -->\n<p>This is the html file without being processed</p>\n<!-- /build -->\n```\n\nAfter processing this file, the output will be:\n\n```html\n<!doctype html>\n<title>title</title>\n\n<link rel=\"apple-touch-icon-precomposed\" href=\"img/apple-touch-icon-precomposed.png\">\n<link rel=\"apple-touch-icon-precomposed\" href=\"img/apple-touch-icon-72x72-precomposed.png\" sizes=\"72x72\">\n\n<link rel=\"stylesheet\" href=\"style.min.css\">\n\n<script src=\"app.min.js\"></script>\n\n<h1>Content from header.html</h1>\n\n<p>Hello world!</p>\n```\n\n#### Advanced example\nIn this example there are multiple targets where we can process the html file depending on which target is being run.\n\n```js\ngrunt.initConfig({\n  processhtml: {\n    dev: {\n      options: {\n        data: {\n          message: 'This is development environment'\n        }\n      },\n      files: {\n        'dev/index.html': ['index.html']\n      }\n    },\n    dist: {\n      options: {\n        process: true\n        data: {\n          title: 'My app',\n          message: 'This is production distribution'\n        }\n      },\n      files: {\n        'dest/index.html': ['index.html']\n      }\n    },\n    custom: {\n      options: {\n        templateSettings: {\n          opener: '{{',\n          closer: '}}'\n        },\n        data: {\n          message: 'This has custom template delimiters'\n        }\n      },\n      files: {\n        'custom/custom.html': ['custom.html']\n      }\n    }\n  }\n});\n```\n\nThe `index.html` to be processed (the `custom.html` is below):\n\n```html\n<!doctype html>\n<!-- notice that no special comment is used here, as process is true.\nif you don't mind having <%= title %> as the title of your app\nwhen not being processed, is a perfectly valid title string -->\n<title><%= title %></title>\n\n<!-- build:css style.min.css -->\n<link rel=\"stylesheet\" href=\"normalize.css\">\n<link rel=\"stylesheet\" href=\"main.css\">\n<!-- /build -->\n\n<!-- build:template\n<p><%= message %></p>\n/build -->\n\n<!-- build:remove -->\n<p>This is the html file without being processed</p>\n<!-- /build -->\n\n<!-- build:remove:dist -->\n<script src=\"js/libs/require.js\" data-main=\"js/config.js\"></script>\n<!-- /build -->\n\n<!-- build:template\n<% if (environment === 'dev') { %>\n<script src=\"app.js\"></script>\n<% } else { %>\n<script src=\"app.min.js\"></script>\n<% } %>\n/build -->\n```\n\nThe `custom.html` to be processed:\n```html\n<!doctype html>\n<html>\n  <head>\n    <title>Custom template delimiters example</title>\n  </head>\n\n  <body>\n    <!-- build:template\n    {{= message }}\n    /build -->\n  </body>\n</html>\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n- 0.2.2 Small code refactor\n- 0.2.1 Added `templateSettings` option tu customize template delimiters\n- 0.2.0 Added the `build:include` feature to include any external file\n- 0.1.1 Lint js files inside tasks/lib/\n- 0.1.0 Initial release\n",
  "readmeFilename": "README.md",
  "_id": "grunt-processhtml@0.2.2",
  "dist": {
    "shasum": "4cbf05c40cfd86a29db93d34587d07c6beb3deba"
  },
  "_from": "grunt-processhtml@~0.2.2",
  "_resolved": "https://registry.npmjs.org/grunt-processhtml/-/grunt-processhtml-0.2.2.tgz"
}
